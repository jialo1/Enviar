#!/usr/bin/env python3
"""
Script de surveillance automatique pour le service enviar
Red√©marre automatiquement le service en cas de probl√®me 502
"""

import subprocess
import time
import logging
import os
import sys
from datetime import datetime

# Configuration du logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('/var/log/enviar_monitor.log'),
        logging.StreamHandler()
    ]
)

logger = logging.getLogger(__name__)

def run_command(command):
    """Ex√©cute une commande et retourne le r√©sultat"""
    try:
        result = subprocess.run(command, shell=True, capture_output=True, text=True)
        return result.returncode, result.stdout, result.stderr
    except Exception as e:
        logger.error(f"Erreur lors de l'ex√©cution de la commande '{command}': {e}")
        return -1, "", str(e)

def check_service_status():
    """V√©rifie si le service est actif"""
    code, stdout, stderr = run_command("systemctl is-active enviar.service")
    return code == 0 and stdout.strip() == "active"

def check_port_8000():
    """V√©rifie si le port 8000 est en √©coute"""
    code, stdout, stderr = run_command("netstat -tlnp | grep :8000")
    return code == 0 and stdout.strip() != ""

def test_application():
    """Teste si l'application r√©pond correctement"""
    code, stdout, stderr = run_command("curl -s -o /dev/null -w '%{http_code}' --connect-timeout 10 http://localhost:8000/")
    return code == 0 and stdout.strip() == "200"

def restart_service():
    """Red√©marre le service"""
    logger.info("üîÑ Red√©marrage du service enviar...")
    
    # Arr√™t du service
    code, stdout, stderr = run_command("systemctl stop enviar.service")
    if code != 0:
        logger.error(f"Erreur lors de l'arr√™t du service: {stderr}")
        return False
    
    # Attendre que le service s'arr√™te
    time.sleep(5)
    
    # D√©marrage du service
    code, stdout, stderr = run_command("systemctl start enviar.service")
    if code != 0:
        logger.error(f"Erreur lors du d√©marrage du service: {stderr}")
        return False
    
    # Attendre que le service d√©marre
    time.sleep(10)
    
    logger.info("‚úÖ Service red√©marr√© avec succ√®s")
    return True

def check_nginx_status():
    """V√©rifie le statut de nginx"""
    code, stdout, stderr = run_command("systemctl is-active nginx")
    return code == 0 and stdout.strip() == "active"

def reload_nginx():
    """Recharge la configuration nginx"""
    logger.info("üîÑ Rechargement de nginx...")
    code, stdout, stderr = run_command("systemctl reload nginx")
    if code == 0:
        logger.info("‚úÖ Nginx recharg√© avec succ√®s")
        return True
    else:
        logger.error(f"Erreur lors du rechargement de nginx: {stderr}")
        return False

def check_system_resources():
    """V√©rifie les ressources syst√®me"""
    # V√©rification de l'espace disque
    code, stdout, stderr = run_command("df / | tail -1 | awk '{print $5}' | sed 's/%//'")
    if code == 0:
        disk_usage = int(stdout.strip())
        if disk_usage > 90:
            logger.warning(f"‚ö†Ô∏è  Utilisation disque √©lev√©e: {disk_usage}%")
    
    # V√©rification de la m√©moire
    code, stdout, stderr = run_command("free | grep Mem | awk '{printf \"%.0f\", $3/$2 * 100.0}'")
    if code == 0:
        memory_usage = int(stdout.strip())
        if memory_usage > 90:
            logger.warning(f"‚ö†Ô∏è  Utilisation m√©moire √©lev√©e: {memory_usage}%")

def main():
    """Fonction principale de surveillance"""
    logger.info("üöÄ D√©marrage du moniteur de service enviar")
    
    consecutive_failures = 0
    max_consecutive_failures = 3
    
    while True:
        try:
            # V√©rifications de base
            service_ok = check_service_status()
            port_ok = check_port_8000()
            app_ok = test_application()
            nginx_ok = check_nginx_status()
            
            # V√©rification des ressources syst√®me
            check_system_resources()
            
            # Diagnostic
            if not service_ok:
                logger.error("‚ùå Service systemd inactif")
                consecutive_failures += 1
            elif not port_ok:
                logger.error("‚ùå Port 8000 non en √©coute")
                consecutive_failures += 1
            elif not app_ok:
                logger.error("‚ùå Application ne r√©pond pas (erreur 502 probable)")
                consecutive_failures += 1
            elif not nginx_ok:
                logger.error("‚ùå Nginx inactif")
                consecutive_failures += 1
            else:
                if consecutive_failures > 0:
                    logger.info("‚úÖ Service r√©tabli - R√©initialisation du compteur d'√©checs")
                consecutive_failures = 0
                logger.info("‚úÖ Tous les services fonctionnent correctement")
            
            # Action corrective si n√©cessaire
            if consecutive_failures >= max_consecutive_failures:
                logger.warning(f"‚ö†Ô∏è  {consecutive_failures} √©checs cons√©cutifs d√©tect√©s - Application des corrections")
                
                # Red√©marrage du service
                if restart_service():
                    consecutive_failures = 0
                    # Rechargement de nginx
                    reload_nginx()
                else:
                    logger.error("‚ùå √âchec du red√©marrage du service")
            
            # Attendre avant la prochaine v√©rification
            time.sleep(30)  # V√©rification toutes les 30 secondes
            
        except KeyboardInterrupt:
            logger.info("üõë Arr√™t du moniteur demand√© par l'utilisateur")
            break
        except Exception as e:
            logger.error(f"‚ùå Erreur inattendue dans le moniteur: {e}")
            time.sleep(60)  # Attendre plus longtemps en cas d'erreur

if __name__ == "__main__":
    # V√©rifier si le script est ex√©cut√© en tant que root
    if os.geteuid() != 0:
        logger.error("‚ùå Ce script doit √™tre ex√©cut√© en tant que root")
        sys.exit(1)
    
    main() 