# Script de d√©ploiement Git automatique
# Auteur: Assistant IA

Write-Host "üöÄ D√©ploiement Git automatique pour Enviar" -ForegroundColor Cyan
Write-Host "==========================================" -ForegroundColor Cyan
Write-Host ""

# Couleurs
$Red = "Red"
$Green = "Green"
$Yellow = "Yellow"
$Blue = "Blue"
$White = "White"

# Fonction pour afficher les messages
function Write-Info {
    param([string]$Message)
    Write-Host "[INFO] $Message" -ForegroundColor $Blue
}

function Write-Success {
    param([string]$Message)
    Write-Host "[SUCCESS] $Message" -ForegroundColor $Green
}

function Write-Warning {
    param([string]$Message)
    Write-Host "[WARNING] $Message" -ForegroundColor $Yellow
}

function Write-Error {
    param([string]$Message)
    Write-Host "[ERROR] $Message" -ForegroundColor $Red
}

# V√©rifier que Git est install√©
Write-Info "V√©rification de Git..."
try {
    $gitVersion = git --version
    Write-Success "Git d√©tect√©: $gitVersion"
} catch {
    Write-Error "Git n'est pas install√© ou n'est pas dans le PATH"
    exit 1
}

# V√©rifier l'√©tat du d√©p√¥t
Write-Info "V√©rification de l'√©tat du d√©p√¥t Git..."
$gitStatus = git status --porcelain

if ($gitStatus) {
    Write-Info "Fichiers modifi√©s d√©tect√©s:"
    $gitStatus | ForEach-Object { Write-Host "  $_" -ForegroundColor $White }
} else {
    Write-Warning "Aucun fichier modifi√© d√©tect√©"
}

# Ajouter tous les fichiers
Write-Info "Ajout de tous les fichiers au staging..."
git add .

# V√©rifier ce qui a √©t√© ajout√©
Write-Info "Fichiers ajout√©s au staging:"
git diff --cached --name-only | ForEach-Object { Write-Host "  ‚úÖ $_" -ForegroundColor $Green }

# Cr√©er le commit
Write-Info "Cr√©ation du commit..."
$commitMessage = Get-Content "commit_message.txt" -Raw
git commit -m $commitMessage

if ($LASTEXITCODE -eq 0) {
    Write-Success "Commit cr√©√© avec succ√®s!"
} else {
    Write-Error "Erreur lors de la cr√©ation du commit"
    exit 1
}

# V√©rifier la branche actuelle
Write-Info "V√©rification de la branche actuelle..."
$currentBranch = git branch --show-current
Write-Info "Branche actuelle: $currentBranch"

# Pousser vers GitHub
Write-Info "Pouss√©e vers GitHub..."
git push origin $currentBranch

if ($LASTEXITCODE -eq 0) {
    Write-Success "Code pouss√© vers GitHub avec succ√®s!"
} else {
    Write-Error "Erreur lors de la pouss√©e vers GitHub"
    exit 1
}

# Afficher le r√©sum√©
Write-Host ""
Write-Success "üéâ D√©ploiement Git termin√© avec succ√®s!"
Write-Host ""
Write-Host "üìã R√©sum√© des actions effectu√©es:" -ForegroundColor $White
Write-Host "‚Ä¢ ‚úÖ Fichiers ajout√©s au staging" -ForegroundColor $Green
Write-Host "‚Ä¢ ‚úÖ Commit cr√©√© avec le message de s√©curisation" -ForegroundColor $Green
Write-Host "‚Ä¢ ‚úÖ Code pouss√© vers GitHub" -ForegroundColor $Green
Write-Host ""
Write-Host "üîÑ Prochaines √©tapes:" -ForegroundColor $Yellow
Write-Host "1. Connectez-vous √† votre serveur de production" -ForegroundColor $White
Write-Host "2. Ex√©cutez le script de d√©ploiement appropri√©" -ForegroundColor $White
Write-Host "3. Verifiez que l'application fonctionne" -ForegroundColor $White
Write-Host ""
Write-Host "üåê Votre code s√©curis√© est maintenant disponible sur GitHub!" -ForegroundColor $Green

# Nettoyer le fichier temporaire
if (Test-Path "commit_message.txt") {
    Remove-Item "commit_message.txt"
    Write-Info "Fichier temporaire nettoy√©"
}

Write-Host ""
Write-Host "Appuyez sur une touche pour continuer..." -ForegroundColor $Yellow
$null = $Host.UI.RawUI.ReadKey("NoEcho,IncludeKeyDown")
