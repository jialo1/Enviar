#!/bin/bash

# Script de r√©solution rapide pour les erreurs 502 Bad Gateway
# Auteur: Assistant IA

set -e

echo "üîß R√©solution rapide de l'erreur 502 Bad Gateway"
echo "================================================"

# Couleurs
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# V√©rifier si on est root
if [[ $EUID -ne 0 ]]; then
   log_error "Ce script doit √™tre ex√©cut√© en tant que root"
   exit 1
fi

log_info "√âtape 1: V√©rification des services..."

# V√©rifier le statut des services
if systemctl is-active --quiet enviar.service; then
    log_success "Service enviar: ACTIF"
else
    log_warning "Service enviar: INACTIF - Red√©marrage..."
    systemctl start enviar.service
fi

if systemctl is-active --quiet nginx; then
    log_success "Service nginx: ACTIF"
else
    log_warning "Service nginx: INACTIF - Red√©marrage..."
    systemctl start nginx
fi

log_info "√âtape 2: Red√©marrage des services..."

# Red√©marrer les services
log_info "Red√©marrage du service enviar..."
systemctl restart enviar.service

log_info "Red√©marrage de nginx..."
systemctl reload nginx

log_info "√âtape 3: Attente du d√©marrage..."
sleep 10

log_info "√âtape 4: V√©rification du port 8000..."

# V√©rifier si le port 8000 est en √©coute
if netstat -tlnp | grep -q ":8000"; then
    log_success "Port 8000 en √©coute"
else
    log_error "Port 8000 non en √©coute - Probl√®me avec Gunicorn"
    log_info "V√©rification des logs..."
    journalctl -u enviar.service --no-pager -n 20
    exit 1
fi

log_info "√âtape 5: Test de l'application..."

# Test de l'application
if curl -s -o /dev/null -w "%{http_code}" --connect-timeout 10 http://localhost:8000/ | grep -q "200"; then
    log_success "Application r√©pond correctement sur le port 8000"
else
    log_error "Application ne r√©pond pas sur le port 8000"
    log_info "V√©rification des logs..."
    journalctl -u enviar.service --no-pager -n 20
    exit 1
fi

log_info "√âtape 6: Test via nginx..."

# Test via nginx
if curl -s -o /dev/null -w "%{http_code}" --connect-timeout 10 http://localhost/ | grep -q "200"; then
    log_success "Application accessible via nginx"
else
    log_warning "Application non accessible via nginx"
    log_info "V√©rification de la configuration nginx..."
    nginx -t
fi

log_info "√âtape 7: V√©rification des ressources syst√®me..."

# V√©rifier l'espace disque
DISK_USAGE=$(df / | tail -1 | awk '{print $5}' | sed 's/%//')
if [ "$DISK_USAGE" -gt 90 ]; then
    log_warning "Utilisation disque √©lev√©e: ${DISK_USAGE}%"
else
    log_success "Espace disque OK: ${DISK_USAGE}%"
fi

# V√©rifier la m√©moire
MEMORY_USAGE=$(free | grep Mem | awk '{printf "%.0f", $3/$2 * 100.0}')
if [ "$MEMORY_USAGE" -gt 90 ]; then
    log_warning "Utilisation m√©moire √©lev√©e: ${MEMORY_USAGE}%"
else
    log_success "M√©moire OK: ${MEMORY_USAGE}%"
fi

echo ""
log_success "‚úÖ R√©solution termin√©e!"
echo ""
echo "üìã Statut final:"
echo "================"
echo "‚Ä¢ Service enviar: $(systemctl is-active enviar.service)"
echo "‚Ä¢ Service nginx: $(systemctl is-active nginx)"
echo "‚Ä¢ Port 8000: $(netstat -tlnp | grep :8000 >/dev/null && echo 'EN √âCOUTE' || echo 'FERM√â')"
echo "‚Ä¢ Application: $(curl -s -o /dev/null -w "%{http_code}" http://localhost:8000/ 2>/dev/null || echo 'ERREUR')"
echo ""
echo "üîç Pour plus de d√©tails, utilisez:"
echo "‚Ä¢ journalctl -u enviar.service -f"
echo "‚Ä¢ python3 diagnostic_502.py"
echo ""

# Si tout va bien, proposer d'activer le moniteur
if systemctl is-active --quiet enviar.service && systemctl is-active --quiet nginx; then
    echo "üí° Voulez-vous activer la surveillance automatique? (y/n)"
    read -r response
    if [[ "$response" =~ ^[Yy]$ ]]; then
        log_info "Activation du service de monitoring..."
        systemctl enable enviar-monitor.service 2>/dev/null || true
        systemctl start enviar-monitor.service 2>/dev/null || true
        log_success "Surveillance automatique activ√©e!"
    fi
fi 